const Block = require('./block');

class Blockchain {
  constructor() {
    //Generate the first block of all, the one without preceding block,
    // the genesis block
    this.chain = [Block.genesis()];
  }

  addBlock(data) {
    //Gets the length of the chain and subtracts 1, thus referring to the
    // last element of the chain
    //the arguments to mineBlock are the "latest" block preceding it, and
    // the data that we wish to store in the new block
    const block = Block.mineBlock(this.chain[this.chain.length - 1], data);
    this.chain.push(block);

    //Is there a need to return the block?...
    return block;
  }

  isValidChain(chain) {
    //Verify if the first block of the chain matches the genesis block,
    // as generated by the Block class
    if (JSON.stringify(chain[0]) !== JSON.stringify(Block.genesis()))
      return false;

    for (let i = 1; i < chain.length; i++) {
      const block = chain[i];
      const lastBlock = chain[i - 1];

      //Verify if hashes match up
      if (
        block.lastHash !== lastBlock.hash ||
        block.hash !== Block.blockHash(block)
      )
        return false;

      return true;
    }
  }

  replaceChain(newChain) {
    //Check if incoming chain is longer than the existing longer
    // than the current myChain
    if (newChain.length <= this.chain.length) {
      console.log('Received chain is not longer than the current chain');
      return;
    } else if (!this.isValidChain(newChain)) {
      console.log('Received chain is invalid!');
      return;
    }

    console.log(
      'Received chain is valid. Replacing blockchain with the new chain'
    );
    this.chain = newChain;
  }
}

module.exports = Blockchain;
